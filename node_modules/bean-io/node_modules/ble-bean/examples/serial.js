/*jslint node: true */
"use strict";

/* 
 * This script requests the general BLE characteristics from the bean every second.
 * Requires a sketch on the Arduino to do a Serial.print() just like you were plugged
 * in over a serial cable. Any sketch will do.
 */

var Bean = require('../');

var intervalId;
var connectedBean;

var blah = "HELLO";
var blah2 = new Buffer(blah);

console.log(typeof blah);
console.log(typeof blah2);

Bean.discover(function(bean){
  connectedBean = bean;
  process.on('SIGINT', exitHandler.bind(this));

  bean.on("serial", function(data, valid){
      console.log("received serial:\t", data.toString('hex'), data.toString('utf8'));
  });

  bean.on("disconnect", function(){
    process.exit();
  });

  bean.connectAndSetup(function(){

    bean.notifyOne(
      //called when theres data
      function(data){
        console.log("received scratch1:\t", data.toString('hex'), data.toString('utf8'));
      },
      //called when the notify is successfully or unsuccessfully setup
      function(error){
        if(error) console.log("one setup: ", error);
      });

    bean.notifyTwo(
      //called when theres data
      function(data){
        console.log("received scratch2:\t", data.toString('hex'), data.toString('utf8'));
      },
      //called when the notify is successfully or unsuccessfully setup
      function(error){
        if(error) console.log("two setup: ", error);
      });

    setInterval(send, 5000);

  });


});


var i = 0;
var j = 0;
var hello = "Hello #";
var goodbye = "Byeee #";


function send(){

  connectedBean.writeOne(new Buffer(hello), function(){
    console.log("sent over scratch:\t", hello);
    i++;
  });

  // connectedBean.write(new Buffer(goodbye + j), function(){
  //   console.log("sent over serial:\t", goodbye + j++);
  // });
}

process.stdin.resume();//so the program will not close instantly
var triedToExit = false;

//turns off led before disconnecting
var exitHandler = function exitHandler() {

  var self = this;
  if (connectedBean && !triedToExit) {
    triedToExit = true;
    console.log('Turning off led...');
    clearInterval(intervalId);
    connectedBean.setColor(new Buffer([0x0,0x0,0x0]), function(){});
    //no way to know if succesful but often behind other commands going out, so just wait 2 seconds
    console.log('Disconnecting from Device...');
    setTimeout(connectedBean.disconnect.bind(connectedBean, function(){}), 2000);
  } else {
    process.exit();
  }
};