{
  "name": "ble-bean",
  "version": "2.1.0",
  "description": "Lightblue Bean BLE Services",
  "main": "index.js",
  "directories": {
    "example": "examples"
  },
  "dependencies": {
    "crc": "^2.1.1",
    "noble": "^0.3.1",
    "noble-device": "^0.1.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jacobrosenthal/ble-bean"
  },
  "keywords": [
    "ble",
    "bean",
    "punchthrough",
    "service",
    "noble"
  ],
  "author": {
    "name": "Jacob Rosenthal"
  },
  "license": "MIT",
  "readme": "#BLE-Bean\nNon Official api for the [LightBlue Bean]( http://punchthrough.com/bean/)\n\nI recommend you familiarize yourself with the Bean first, but the gist is it has a BLE transceiver and an Arduino onboard. You can program regular Arduino sketches on the Arduino, but the BLE transceiver is available no matter what sketch you have on the bean.\n\nSecond it might be helpful to familiarize yourself with [noble](https://www.npmjs.com/package/noble) as this library is built on [noble-device](https://www.npmjs.com/package/noble-device). \n\n#Install\n```\nnpm install ble-bean\n```\n#Use\nTo get started You include this library and ask the library to discover a bean:\n```\nvar Bean = require('ble-bean');\nBean.discover(function(bean){\n\n}\n```\n\nBut you're not done yet, inside the discover you need to ask the bean to set itself up:\n```\nbean.connectAndSetup(function(){\n\n}\n```\n\nWhen that returns you're finally ready to use the ble-bean api:\n```\nbean.requestTemp(callback);\nbean.requestAccell(callback);\nbean.setColor(color, callback); //where color is a buffer of r,g,b hex values\nbean.write(data, callback); //where data is a buffer\n```\nHuge gotcha here though, the callback to all api commands DO NOT GIVE YOU BACK YOUR DATA, they simply confirms that the request has left your computer. \n\nThe data response is based on emitters. You need to listen for the event you're interested in. We offer:\n\n* serial - which returns data, valid - serial data from the Arduino\n* accell - which returns x, y, z, valid - accelerometer data from bean\n* temp - which returns temp, valid - accelerometer data from bean\n* raw - which returns packet, length, valid, command - which returns raw command packet from bean before it gets turned into accell, serial, temp, etc (with gst and gatt headers stripped) \n\nEach of the events offers a valid flag to see if the checksum matched up, etc. It probably doesn't matter to you unless you're doing something mission critical.\n\nTheres are also five [scratch characteristics](https://punchthrough.com/bean/arduino-users-guide/#scratch_characteristics) available on the bean. These are just another way to send data to your Arduino:\n```\nbean.readOne(callback); //explicit read from characteristic\nbean.notifyOne(readCallback, callback); //listen for all data from characteristic\nbean.writeOne(callback); //write data to characteristic\nbean.unnotifyOne(readCallback, callback); //stop listening for all data from characteristic\n```\n\nFor a fairly exhaustive example that connects, listens for serial data, sets the led color randomly, asks the bean for temp and accell data every second, and disconnects cleanly when you control-c, from bean directory run:\n```\nnode examples/bean_example.js\n```\n\n\n\n###CHANGELOG\n0.1.0 \nfirst\n\n0.2.0\ncleaned up scanning in the example and the package.json file\n\n0.3.0 and 0.4.0 \nadd scratch characteristics with notify \nfix accelerometer readings\nbetter logging in example, took console.log out of library\n\n0.5.0 \nscale accelerometer readings\nadded readme with changelog\n\n0.6.0\nonly emit command specific emits when packets are valid\nrefactor for cleaner code\nadd write scratch characteristics\n\n0.7.0\nadd write serial data to bean characteristic\n\n0.7.1\nBetter readme, no code changes.\n\n0.8.0\nNew Serial event for parsed serial data called 'serial'\n\n1.0.0\nEmitter callback signatures changed!! \n'read' emitter became 'raw'\naccell and serial changed removing the sequence since its handled internally now.\nAdded requestTemp.\n\n2.0.0\nMove to new noble-device pattern which significantly removes noble cruft from implementation. \nChanges the scratch characteristic API.\nExample has cleaner disconnect code.\n\n2.0.1\nClean and split up examples\n\n2.0.2\nFixed bug in Scratch write implementation\nclean up firmata example\n\n2.1.0\nnewer firmwares are gating serial SEND during first x seconds, added unGate function to disable",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jacobrosenthal/ble-bean/issues"
  },
  "_id": "ble-bean@2.1.0",
  "dist": {
    "shasum": "53723c89f4da5c441496ef31f6c04c1dac1edc08"
  },
  "_from": "ble-bean@^2.1.0",
  "_resolved": "https://registry.npmjs.org/ble-bean/-/ble-bean-2.1.0.tgz"
}
